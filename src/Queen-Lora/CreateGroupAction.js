/**
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateGroupAction model module.
 * @module Queen-Lora/CreateGroupAction
 * @version 1.0.0
 */
class CreateGroupAction {
    /**
     * Constructs a new <code>CreateGroupAction</code>.
     * @alias module:Queen-Lora/CreateGroupAction
     * @param groupName {String} Name of the group being created
     */
    constructor(groupName) { 
        
        CreateGroupAction.initialize(this, groupName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, groupName) { 
        obj['groupName'] = groupName;
    }

    /**
     * Constructs a <code>CreateGroupAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Queen-Lora/CreateGroupAction} obj Optional instance to populate.
     * @return {module:Queen-Lora/CreateGroupAction} The populated <code>CreateGroupAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateGroupAction();

            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('chatIds')) {
                obj['chatIds'] = ApiClient.convertToType(data['chatIds'], ['String']);
            }
            if (data.hasOwnProperty('phones')) {
                obj['phones'] = ApiClient.convertToType(data['phones'], ['Number']);
            }
            if (data.hasOwnProperty('messageText')) {
                obj['messageText'] = ApiClient.convertToType(data['messageText'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns Name of the group being created
     * @return {String}
     */
    getGroupName() {
        return this.groupName;
    }

    /**
     * Sets Name of the group being created
     * @param {String} groupName Name of the group being created
     */
    setGroupName(groupName) {
        this['groupName'] = groupName;
    }
/**
     * Returns **Required if phones is not set**  An array of new participients chatIds. 
     * @return {Array.<String>}
     */
    getChatIds() {
        return this.chatIds;
    }

    /**
     * Sets **Required if phones is not set**  An array of new participients chatIds. 
     * @param {Array.<String>} chatIds **Required if phones is not set**  An array of new participients chatIds. 
     */
    setChatIds(chatIds) {
        this['chatIds'] = chatIds;
    }
/**
     * Returns **Required if chatIds is not set**  An array of phones starting with the country code. You do not need to add your number.   USA example: [17472822486'].
     * @return {Array.<Number>}
     */
    getPhones() {
        return this.phones;
    }

    /**
     * Sets **Required if chatIds is not set**  An array of phones starting with the country code. You do not need to add your number.   USA example: [17472822486'].
     * @param {Array.<Number>} phones **Required if chatIds is not set**  An array of phones starting with the country code. You do not need to add your number.   USA example: [17472822486'].
     */
    setPhones(phones) {
        this['phones'] = phones;
    }
/**
     * Returns The text of the message that will be sent to the group when it is created. If you do not set a parameter, the message will not be sent
     * @return {String}
     */
    getMessageText() {
        return this.messageText;
    }

    /**
     * Sets The text of the message that will be sent to the group when it is created. If you do not set a parameter, the message will not be sent
     * @param {String} messageText The text of the message that will be sent to the group when it is created. If you do not set a parameter, the message will not be sent
     */
    setMessageText(messageText) {
        this['messageText'] = messageText;
    }

}

/**
 * Name of the group being created
 * @member {String} groupName
 */
CreateGroupAction.prototype['groupName'] = undefined;

/**
 * **Required if phones is not set**  An array of new participients chatIds. 
 * @member {Array.<String>} chatIds
 */
CreateGroupAction.prototype['chatIds'] = undefined;

/**
 * **Required if chatIds is not set**  An array of phones starting with the country code. You do not need to add your number.   USA example: [17472822486'].
 * @member {Array.<Number>} phones
 */
CreateGroupAction.prototype['phones'] = undefined;

/**
 * The text of the message that will be sent to the group when it is created. If you do not set a parameter, the message will not be sent
 * @member {String} messageText
 */
CreateGroupAction.prototype['messageText'] = undefined;






export default CreateGroupAction;

