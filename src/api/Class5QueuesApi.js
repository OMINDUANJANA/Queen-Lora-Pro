/**
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClearActionsQueueStatus from '../Queen-Lora/ClearActionsQueueStatus';
import ClearMessagesQueueStatus from '../Queen-Lora/ClearMessagesQueueStatus';
import OutboundActions from '../Queen-Lora/OutboundActions';
import OutboundMessages from '../Queen-Lora/OutboundMessages';

/**
* Class5Queues service.
* @module api/Class5QueuesApi
* @version 1.0.0
*/
export default class Class5QueuesApi {

    /**
    * Constructs a new Class5QueuesApi. 
    * @alias module:api/Class5QueuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Clear outbound actions queue.
     * This method is needed when you accidentally sent thousands of actions in a row.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/ClearActionsQueueStatus} and HTTP response
     */
    clearActionsQueueWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClearActionsQueueStatus;
      return this.apiClient.callApi(
        '/clearActionsQueue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear outbound actions queue.
     * This method is needed when you accidentally sent thousands of actions in a row.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/ClearActionsQueueStatus}
     */
    clearActionsQueue() {
      return this.clearActionsQueueWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear outbound messages queue.
     * This method is needed when you accidentally sent thousands of messages in a row.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/ClearMessagesQueueStatus} and HTTP response
     */
    clearMessagesQueueWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClearMessagesQueueStatus;
      return this.apiClient.callApi(
        '/clearMessagesQueue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear outbound messages queue.
     * This method is needed when you accidentally sent thousands of messages in a row.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/ClearMessagesQueueStatus}
     */
    clearMessagesQueue() {
      return this.clearMessagesQueueWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get outbound messages queue.
     * When you create an action, all actions are queued up. If an action is not executed, it remains in the queue and will be sent for execution in time. again. The action cannot be executed due to the status of the device connected to the account.  This method give the last 100 actions in the queue.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/OutboundActions} and HTTP response
     */
    showActionsQueueWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundActions;
      return this.apiClient.callApi(
        '/showActionsQueue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get outbound messages queue.
     * When you create an action, all actions are queued up. If an action is not executed, it remains in the queue and will be sent for execution in time. again. The action cannot be executed due to the status of the device connected to the account.  This method give the last 100 actions in the queue.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/OutboundActions}
     */
    showActionsQueue() {
      return this.showActionsQueueWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get outbound messages queue.
     * When sending messages, all messages are in the queue. If the message is not sent, then it remains in the queue and in time it will be sent again. The message may not be sent due to the status of the device connected to the account.   This method give the last 100 messages in the queue.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/OutboundMessages} and HTTP response
     */
    showMessagesQueueWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundMessages;
      return this.apiClient.callApi(
        '/showMessagesQueue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get outbound messages queue.
     * When sending messages, all messages are in the queue. If the message is not sent, then it remains in the queue and in time it will be sent again. The message may not be sent due to the status of the device connected to the account.   This method give the last 100 messages in the queue.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/OutboundMessages}
     */
    showMessagesQueue() {
      return this.showMessagesQueueWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
