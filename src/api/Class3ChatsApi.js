/**
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Chats from '../Queen-Lora/Chats';
import CreateGroupAction from '../Queen-Lora/CreateGroupAction';
import CreateGroupStatus from '../Queen-Lora/CreateGroupStatus';
import GroupParticipantAction from '../Queen-Lora/GroupParticipantAction';
import GroupParticipantStatus from '../Queen-Lora/GroupParticipantStatus';
import ReadChatAction from '../Queen-Lora/ReadChatAction';
import ReadChatStatus from '../Queen-Lora/ReadChatStatus';

/**
* Class3Chats service.
* @module api/Class3ChatsApi
* @version 1.0.0
*/
export default class Class3ChatsApi {

    /**
    * Constructs a new Class3ChatsApi. 
    * @alias module:api/Class3ChatsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Adding participant to a group
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/GroupParticipantStatus} and HTTP response
     */
    addGroupParticipantWithHttpInfo(groupParticipantAction) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling addGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/addGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Adding participant to a group
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/GroupParticipantStatus}
     */
    addGroupParticipant(groupParticipantAction) {
      return this.addGroupParticipantWithHttpInfo(groupParticipantAction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Demote group participant
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/GroupParticipantStatus} and HTTP response
     */
    demoteGroupParticipantWithHttpInfo(groupParticipantAction) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling demoteGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/demoteGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Demote group participant
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/GroupParticipantStatus}
     */
    demoteGroupParticipant(groupParticipantAction) {
      return this.demoteGroupParticipantWithHttpInfo(groupParticipantAction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the chat list.
     * The chat list includes avatars.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/Chats} and HTTP response
     */
    getChatsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Chats;
      return this.apiClient.callApi(
        '/dialogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the chat list.
     * The chat list includes avatars.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/Chats}
     */
    getChats() {
      return this.getChatsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a group and sends the message to the created group.
     * The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
     * @param {module:Queen-Lora/CreateGroupAction} createGroupAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/CreateGroupStatus} and HTTP response
     */
    groupWithHttpInfo(createGroupAction) {
      let postBody = createGroupAction;
      // verify the required parameter 'createGroupAction' is set
      if (createGroupAction === undefined || createGroupAction === null) {
        throw new Error("Missing the required parameter 'createGroupAction' when calling group");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGroupStatus;
      return this.apiClient.callApi(
        '/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a group and sends the message to the created group.
     * The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
     * @param {module:Queen-Lora/CreateGroupAction} createGroupAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/CreateGroupStatus}
     */
    group(createGroupAction) {
      return this.groupWithHttpInfo(createGroupAction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make participant in the group an administrator
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/GroupParticipantStatus} and HTTP response
     */
    promoteGroupParticipantWithHttpInfo(groupParticipantAction) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling promoteGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/promoteGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make participant in the group an administrator
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/GroupParticipantStatus}
     */
    promoteGroupParticipant(groupParticipantAction) {
      return this.promoteGroupParticipantWithHttpInfo(groupParticipantAction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Open chat for reading messages
     * Use this method to make users see their messages read.
     * @param {module:Queen-Lora/ReadChatAction} readChatAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/ReadChatStatus} and HTTP response
     */
    readChatWithHttpInfo(readChatAction) {
      let postBody = readChatAction;
      // verify the required parameter 'readChatAction' is set
      if (readChatAction === undefined || readChatAction === null) {
        throw new Error("Missing the required parameter 'readChatAction' when calling readChat");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = ReadChatStatus;
      return this.apiClient.callApi(
        '/readChat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Open chat for reading messages
     * Use this method to make users see their messages read.
     * @param {module:Queen-Lora/ReadChatAction} readChatAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/ReadChatStatus}
     */
    readChat(readChatAction) {
      return this.readChatWithHttpInfo(readChatAction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove participant from a group
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Queen-Lora/GroupParticipantStatus} and HTTP response
     */
    removeGroupParticipantWithHttpInfo(groupParticipantAction) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling removeGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/removeGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove participant from a group
     * @param {module:Queen-Lora/GroupParticipantAction} groupParticipantAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Queen-Lora/GroupParticipantStatus}
     */
    removeGroupParticipant(groupParticipantAction) {
      return this.removeGroupParticipantWithHttpInfo(groupParticipantAction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
